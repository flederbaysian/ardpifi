package main

import (
	"bufio"
	"errors"
	"math"
	"strconv"
	"strings"

	// "flag"
	"fmt"
	"log"

	"github.com/jacobsa/go-serial/serial"
)

func main() {
	options := serial.OpenOptions{
		PortName:        "/dev/ttyS0",
		BaudRate:        9600,
		DataBits:        8,
		StopBits:        1,
		MinimumReadSize: 4,
	}
	serialPort, err := serial.Open(options)
	if err != nil {
		log.Fatalf("serial.Open: %v", err)
	}
	defer serialPort.Close()
	reader := bufio.NewReader(serialPort)
	scanner := bufio.NewScanner(reader)
	// geocoder := Geocoder{AppId: "APP-ID-HERE", AppCode: "APP-CODE-HERE"}
	for scanner.Scan() {
		gps, err := ParseNMEALine(scanner.Text())
		if err == nil {
			horizontalDilution := gps.GetHorizontalDilution()
			if len(horizontalDilution) > 0 {
				fmt.Println(horizontalDilution)
			}

			// if gps.fixQuality == "1" || gps.fixQuality == "2" {
			latitude, _ := gps.GetLatitude()
			longitude, _ := gps.GetLongitude()

			if len(latitude) > 0 {
				fmt.Println(latitude + "," + longitude)
			}
			// result, _ := geocoder.reverse(Position{Latitude: latitude, Longitude: longitude})
			// if len(result.Response.View) > 0 && len(result.Response.View[0].Result) > 0 {
			// 	fmt.Println(result.Response.View[0].Result[0].Location.Address.Label)
			// } else {
			// 	fmt.Println("no address estimates found for the position")
			// }
			// } else {
			// 	fmt.Println("no gps fix available")
			// }
			// time.Sleep(1 * time.Second)
		}
	}
}

type NMEA struct {
	fixTimestamp       string
	latitude           string
	latitudeDirection  string
	longitude          string
	longitudeDirection string
	fixQuality         string
	satellites         string
	horizontalDilution string
	antennaAltitude    string
	antennaHeight      string
	updateAge          string
}

func ParseNMEALine(line string) (NMEA, error) {
	tokens := strings.Split(line, ",")
	// if tokens[0] == "$GPGGA" {
	// 	return NMEA{
	// 		fixTimestamp:       tokens[1],
	// 		latitude:           tokens[2],
	// 		latitudeDirection:  tokens[3],
	// 		longitude:          tokens[4],
	// 		longitudeDirection: tokens[5],
	// 		fixQuality:         tokens[6],
	// 		satellites:         tokens[7],
	// 	}, nil
	// }

	// $GNGLL,5107.0014143,N,11402.3278489,W,205122.00,A,A*6E
	// https://docs.novatel.com/OEM7/Content/Logs/GPGLL.htm
	if tokens[0] == "$GNGLL" {
		return NMEA{
			// fixTimestamp:       tokens[1],
			latitude:           tokens[1],
			latitudeDirection:  tokens[2],
			longitude:          tokens[3],
			longitudeDirection: tokens[4],
			// fixQuality:         "1",
			// fixQuality:         tokens[6],
			// satellites:         tokens[7],
		}, nil
	} else if tokens[0] == "$GNGSA" {
		// https://www.hemispheregnss.com/technical-resource-manual/Import_Folder/GNGSA_Message.htm
		return NMEA{
			// fixTimestamp:       tokens[1],
			// latitude:           tokens[1],
			// latitudeDirection:  tokens[2],
			// longitude:          tokens[3],
			// longitudeDirection: tokens[4],
			horizontalDilution: tokens[16], // Horizontal Dilution of Precision (HDOP) 1.0 to 9.9
			// fixQuality:         tokens[6],
			// satellites:         tokens[7],
		}, nil
	}

	return NMEA{}, errors.New("unsupported nmea string")
}

func ParseDegrees(value string, direction string) (string, error) {
	if value == "" || direction == "" {
		return "", errors.New("the location and / or direction value does not exist")
	}
	lat, _ := strconv.ParseFloat(value, 64)
	degrees := math.Floor(lat / 100)
	minutes := ((lat / 100) - math.Floor(lat/100)) * 100 / 60
	decimal := degrees + minutes
	if direction == "W" || direction == "S" {
		decimal *= -1
	}
	return fmt.Sprintf("%.6f", decimal), nil

}

func (nmea NMEA) GetLatitude() (string, error) {
	return ParseDegrees(nmea.latitude, nmea.latitudeDirection)
}

func (nmea NMEA) GetLongitude() (string, error) {
	return ParseDegrees(nmea.longitude, nmea.longitudeDirection)
}

func (nmea NMEA) GetHorizontalDilution() string {
	// Horizontal Dilution of Precision (HDOP) 1.0 to 9.9
	return nmea.horizontalDilution
}
